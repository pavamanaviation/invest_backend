# """
# Django settings for invest_proj project.

# Generated by 'django-admin startproject' using Django 5.1.3.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.1/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.1/ref/settings/
# """

# import os
# from pathlib import Path
# from dotenv import load_dotenv
# from decouple import config

# # Load environment variables from .env file
# load_dotenv()

# BASE_DIR = Path(__file__).resolve().parent.parent
# # Build paths inside the project like this: BASE_DIR / 'subdir'.

# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!

# SECRET_KEY = os.getenv('SECRET_KEY')

# DEBUG = os.getenv('DEBUG') == 'True'

# ALLOWED_HOSTS = ['*']  # Allow all hosts


# # Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'invest_app',
#     'corsheaders',
# ]

# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware', 
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

# ROOT_URLCONF = 'invest_proj.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'invest_proj.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME'),
#         'USER': os.getenv('DB_USER'),
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST'),
#         'PORT': os.getenv('DB_PORT'),
#     }
# }


# # Password validation
# # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# # TIME_ZONE = 'UTC'
# TIME_ZONE = 'Asia/Kolkata'

# USE_I18N = True

# USE_TZ = True


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'

# # STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins
# CORS_ALLOW_CREDENTIALS = True
# # CORS_ALLOW_METHODS = [
# #     "GET",
# #     "POST",
# #     "PUT",
# #     "PATCH",
# #     "DELETE",
# #     "OPTIONS"
# # ]
# # CORS_ALLOW_HEADERS = [
# #     "accept",
# #     "accept-encoding",
# #     "authorization",
# #     "content-type",
# #     "dnt",
# #     "origin",
# #     "user-agent",
# #     "x-csrftoken",
# #     "x-requested-with",
# # ]

# # Google OAuth Credentials

# GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
# GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

# AUTHENTICATION_BACKENDS = (
#     'social_core.backends.google.GoogleOAuth2',
#     'django.contrib.auth.backends.ModelBackend',
# )

# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = GOOGLE_CLIENT_ID
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = GOOGLE_CLIENT_SECRET

# # Redirect after login/logout
# # LOGIN_URL = '/customer-login'
# # LOGIN_REDIRECT_URL = '/'
# # LOGOUT_REDIRECT_URL = '/'


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
# EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))  # Convert port to integer
# EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
# SITE_URL = os.getenv('SITE_URL')
# # SITE_URL = 'http://yourdomain.com'  # Your website URL


# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# # Increase file upload limit (default is 2.5MB)
# # DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
# # FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# from decouple import config
# # MSG91_AUTH_KEY = config('MSG91_AUTH_KEY')
# # MSG91_SENDER_ID = config('MSG91_SENDER_ID')
# # MSG91_ROUTE = config('MSG91_ROUTE', default='4')
# # MSG91_COUNTRY = config('MSG91_COUNTRY', default='91')

# TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
# TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
# TWILIO_PHONE_NUMBER = config("TWILIO_PHONE_NUMBER")

# # RAZORPAY_KEY_ID = config("RAZORPAY_KEY_ID")
# # RAZORPAY_KEY_SECRET = config("RAZORPAY_KEY_SECRET")
# # FRONTEND_URL = os.getenv("FRONTEND_URL")
# # RAZORPAY_CALLBACK_URL = os.getenv("RAZORPAY_CALLBACK_URL")

# # SECURE_CROSS_ORIGIN_OPENER_POLICY = None


# AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
# AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
# AWS_S3_BUCKET_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"


# IDFY_TEST_API_KEY = os.getenv("IDFY_TEST_API_KEY")
# IDFY_TEST_ACCOUNT_ID = os.getenv("IDFY_TEST_ACCOUNT_ID")
# IDFY_TEST_GROUP_ID = os.getenv("IDFY_TEST_GROUP_ID")

# IDFY_BANK_VERIFY_URL = os.getenv("IDFY_BANK_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/bank_account")
# IDFY_AADHAR_VERIFY_URL = os.getenv("IDFY_AADHAR_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/aadhaar_lite")
# IDFY_PAN_VERIFY_URL = os.getenv("IDFY_PAN_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/pan")
# IDFY_RESULT_URL = "https://eve.idfy.com/v3/tasks?request_id={request_id}"


# # SESSION_COOKIE_SAMESITE = "None"
# # SESSION_COOKIE_SECURE = True  # Required if you're on HTTPS

# CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]
# SESSION_COOKIE_SAMESITE = "Lax"
# SESSION_COOKIE_SECURE = False
# CSRF_COOKIE_SAMESITE = "Lax"
# CSRF_COOKIE_SECURE = False
"""
Django settings for invest_proj project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from decouple import config

# Load environment variables from .env file
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent
# Build paths inside the project like this: BASE_DIR / 'subdir'.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv('SECRET_KEY')

DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOSTS = ['*']  # Allow all hosts


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'invest_app',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',

]

ROOT_URLCONF = 'invest_proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'invest_proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
     "http://127.0.0.1:3000",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

CORS_EXPOSE_HEADERS = ["Set-Cookie"]  # <-- 🔥 Important

# Google OAuth Credentials

GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = GOOGLE_CLIENT_ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = GOOGLE_CLIENT_SECRET

# Redirect after login/logout
# LOGIN_URL = '/customer-login'
# LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = '/'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))  # Convert port to integer
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
SITE_URL = os.getenv('SITE_URL')
# SITE_URL = 'http://yourdomain.com'  # Your website URL


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Increase file upload limit (default is 2.5MB)
# DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
# FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

from decouple import config
# MSG91_AUTH_KEY = config('MSG91_AUTH_KEY')
# MSG91_SENDER_ID = config('MSG91_SENDER_ID')
# MSG91_ROUTE = config('MSG91_ROUTE', default='4')
# MSG91_COUNTRY = config('MSG91_COUNTRY', default='91')

# TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
# TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
# TWILIO_PHONE_NUMBER = config("TWILIO_PHONE_NUMBER")

RAZORPAY_KEY_ID = config("RAZORPAY_KEY_ID")
RAZORPAY_KEY_SECRET = config("RAZORPAY_KEY_SECRET")
RAZORPAY_WEBHOOK_SECRET = "pavamanWebhookSecret5424"

# FRONTEND_URL = os.getenv("FRONTEND_URL")
# RAZORPAY_CALLBACK_URL = os.getenv("RAZORPAY_CALLBACK_URL")

# SECURE_CROSS_ORIGIN_OPENER_POLICY = None


AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
AWS_S3_BUCKET_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"


IDFY_TEST_API_KEY = os.getenv("IDFY_TEST_API_KEY")
IDFY_TEST_ACCOUNT_ID = os.getenv("IDFY_TEST_ACCOUNT_ID")
IDFY_TEST_GROUP_ID = os.getenv("IDFY_TEST_GROUP_ID")

IDFY_BANK_VERIFY_URL = os.getenv("IDFY_BANK_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/bank_account")
IDFY_AADHAR_VERIFY_URL = os.getenv("IDFY_AADHAR_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/aadhaar_lite")
IDFY_PAN_VERIFY_URL = os.getenv("IDFY_PAN_VERIFY_URL", "https://eve.idfy.com/v3/tasks/sync/verify_with_source/pan")
IDFY_RESULT_URL = "https://eve.idfy.com/v3/tasks?request_id={request_id}"



CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SECURE = False  # Set to True in production (HTTPS)

SESSION_COOKIE_DOMAIN = None

# Allow cookie to be shared across ports/domains
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = False  # ✅ Only True if you're using HTTPS
SESSION_COOKIE_DOMAIN = None   # Let Django set it dynamically

MSG91_AUTH_KEY = config('MSG91_AUTH_KEY')
MSG91_SENDER_ID = config('MSG91_SENDER_ID')
MSG91_ORDER_CONFIRM_FLOW_ID = config("MSG91_ORDER_CONFIRM_FLOW_ID")
MSG91_COUNTRY = config('MSG91_COUNTRY', default='91')
MSG91_SMS_URL = config('MSG91_SMS_URL')
MSG91_FLOW_ID_RESETPASSWORD = config('MSG91_FLOW_ID_RESETPASSWORD')
MSG91_FLOW_ID_MOILE_VERIFY = config('MSG91_FLOW_ID_MOILE_VERIFY')
